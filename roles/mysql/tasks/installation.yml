---
- name: Disable selinux
  include_role:
    name: selinux-disable

- name: Include MySQL installation role [ {{ ansible_os_family }} ]
  include_tasks: "installation-{{ ansible_os_family }}.yml"

- name: Add MySQL user group
  group:
    name: "{{ mysql_os_group }}"
    state: present
    system: true

- name: Add MySQL user
  user:
    name: "{{ mysql_os_user }}"
    group: "{{ mysql_os_group }}"
    createhome: no
    shell: /sbin/nologin
    state: present
    system: true

- name: Enable percona {{ mysql_version }} release
  shell: "percona-release enable-only ps-{{ mysql_version_alias }}-lts release"

- name: Enable percona tools release
  shell: "percona-release enable tools release"

- name: Enable percona xtrabackup release
  shell: "percona-release enable pxb-{{ mysql_version_alias }}-lts"

- name: Install percona MySQL server 
  package:
    name: "{{ packages }}"
    state: latest
  notify: restart mysql
  environment:
    PERCONA_TELEMETRY_DISABLE: "1"
  vars:
    packages:
      - "percona-server-server"
      - "percona-server-client"

- name: Install percona MySQL server tools
  package:
    name: "{{ packages }}"
    state: latest
  vars:
    packages:
      - "percona-toolkit"
      - "percona-xtrabackup-{{ mysql_version_alias }}"

- name: Install python MySQL client
  package:
    name: "{{ python_mysql_client }}"
    state: latest

- name: Disable percona telemetry agent
  systemd: 
    name: "percona-telemetry-agent"
    state: stopped
    enabled: false
  when: _mysql_major_version == "8" and _mysql_minor_version == "4"

- name: Setup my.cnf
  blockinfile:
    path: "{{ mysql_config_file }}"
    marker: "# {mark} ANSIBLE MANAGED BLOCK FOR MYSQL"
    block: "{{ lookup('template', 'my.cnf.j2') }}"

- name: Rander MySQL client configuration
  template:
    src: "{{ item }}.j2"
    dest: "{{ mysql_config_include_dir }}/{{ item }}"
    owner: "{{ mysql_os_user }}"
    group: "{{ mysql_os_group }}"
    mode: "600"
  when: not mysql_multi
  loop:
    - "client.cnf"

- name: Determine whether the instance has been initialized
  stat:
    path: "{{ _is_initialized_file }}"
  register: __file_status

- name: Create MySQL instance directory
  file:
    path: "{{ mysql_instance_dir }}/{{ item }}"
    owner: "{{ mysql_os_user }}"
    group: "{{ mysql_os_group }}"
    recurse: yes
    state: directory
  with_items:
    - data
    - logs/binlog
    - logs/relaylog
    - logs/errorlog
    - logs/slowlog

- name: Rander MySQL instance configuration
  template:
    src: "mysqld.cnf.j2"
    dest: "{{ mysql_config_include_dir }}/{{ item }}"
    owner: "{{ mysql_os_user }}"
    group: "{{ mysql_os_group }}"
    mode: "600"
  notify: restart mysql
  loop:
    - "mysqld{{ _mysql_defaults_group_suffix }}.cnf"

- name: Initialize instance
  command: "/usr/sbin/mysqld --initialize-insecure --user={{ mysql_os_user }} --datadir={{ mysql_instance_dir }}/data"
  when: not __file_status.stat.exists
  notify: restart mysql

- name: Create initialized markup file
  file:
    path: "{{ _is_initialized_file }}"
    state: touch
  when: not __file_status.stat.exists

- name: Setup regular clean MySQL logs
  template: 
    src: "mysql.logrotate.j2"
    dest: "/etc/logrotate.d/mysql{{ _mysql_defaults_group_suffix }}"

- name: Force all notified handlers to run at this point, not waiting for normal sync points
  ansible.builtin.meta: flush_handlers

- name: Check if the clone plugin is installed
  community.mysql.mysql_query:
    login_unix_socket: "{{ mysql_unix_socket }}"
    login_user: root
    query: "SELECT COUNT(*) AS cnt FROM information_schema.plugins WHERE PLUGIN_NAME='clone';"
  register: plugin_check

- name: Install clone plugin
  community.mysql.mysql_query:
    login_unix_socket: "{{ mysql_unix_socket }}"
    login_user: root
    query: "INSTALL PLUGIN clone SONAME 'mysql_clone.so';"
  when: plugin_check.query_result[0][0].cnt | int == 0
  changed_when: true  

---
- name: Add mysql user group
  group:
    name: "{{ mysql_os_group }}"
    state: present
    system: true

- name: Add mysql user
  user:
    name: "{{ mysql_os_user }}"
    group: "{{ mysql_os_group }}"
    createhome: no
    shell: /sbin/nologin
    state: present
    system: true

- name: Enable percona {{ mysql_version }} release
  shell: "percona-release enable-only ps-{{ mysql_version_alias }}-lts release"

- name: Enable percona tools release
  shell: "percona-release enable tools release"

- name: Enable percona xtrabackup release
  shell: "percona-release enable pxb-{{ mysql_version_alias }}-lts"

- name: Install percona server and dependent tools
  package:
    name: "{{ item }}"
    state: latest
  loop:
    - "percona-server-server"
    - "percona-toolkit"
    - "percona-xtrabackup-{{ mysql_version_alias }}"
  environment:
    PERCONA_TELEMETRY_DISABLE: "1"

- name: Disable percona telemetry agent
  systemd: 
    name: "percona-telemetry-agent"
    state: stopped
    enabled: false
  when: _mysql_major_version == "8" and _mysql_minor_version == "4"

- name: Setup my.cnf
  blockinfile:
    path: "{{ mysql_config_file }}"
    marker: "# {mark} ANSIBLE MANAGED BLOCK FOR MYSQL"
    block: "!includedir {{ mysql_config_include_dir }}"

- name: Setup regular clean mysql logs
  template: 
    src: mysql.logrotate.j2
    dest: /etc/logrotate.d/mysql

- name: Copy mysql configuration files
  template:
    src: "{{ item }}.j2"
    dest: "{{ mysql_config_include_dir }}/{{ item }}"
    owner: "{{ mysql_os_user }}"
    group: "{{ mysql_os_group }}"
    mode: "600"
  loop:
    - "mysqld.cnf"
    - "client.cnf"

- name: Create mysql instance directory
  file:
    path: "{{ mysql_data_path }}/{{ mysql_port }}/{{ item }}"
    owner: "{{ mysql_os_user }}"
    group: "{{ mysql_os_group }}"
    recurse: yes
    state: directory
  with_items:
    - data
    - logs/binlog
    - logs/relaylog
    - logs/errorlog
    - logs/slowlog

- name: Determine whether the instance has been initialized
  stat:
    path: "{{ _is_initialized_file }}"
  register: __file_status

- name: Initialize instance
  command: "/usr/sbin/mysqld --initialize-insecure --user={{ mysql_os_user }}"
  when: not __file_status.stat.exists

- name: Create initialized markup file
  file:
    path: "{{ _is_initialized_file }}"
    owner: "{{ mysql_os_user }}"
    group: "{{ mysql_os_group }}"
    state: touch

- name: Enable mysql daemon
  systemd:
    name: "{{ systemd_mysql_service }}"
    state: restarted
    enabled: true
    daemon_reload: true

- name: Make sure mysql service is running
  ansible.builtin.service_facts: {}
  register: __service_status
  until: "__service_status.ansible_facts.services[systemd_mysql_service].state == 'running'"
  retries: 10
  delay: 5

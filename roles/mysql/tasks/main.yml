 - name: Add Mysql User Group
   group:
     name: "{{ mysql_os_user.name }}"
     state: present
     system: yes

 - name: Add Mysql User
   user:
     name: "{{ mysql_os_user.name }}"
     group: "{{ mysql_os_user.name }}"
     createhome: no
     comment: "{{ mysql_os_user.comment }}"
     shell: /sbin/nologin
     state: present
     system: yes

 - name: Include OS Tasks
   include_tasks: "{{ ansible_os_family }}.yml"

 - name: Enable Percona 8x Release
   shell: percona-release enable-only ps-8x-innovation release

 - name: Enable Percona Tool Release
   shell: percona-release enable tools release

 - name: Install Percona Server
   package:
     name: "percona-server-server-{{ version }}"
     state: latest

 - name: Install Percona Tools
   package:
     name: "{{ item }}"
     state: latest
   loop:
     - "percona-toolkit"
     - "percona-xtrabackup-{{ version.split('.')[0] | string }}{{ version.split('.')[1] | string }}"

 - name: Set Mysqldump Alias
   blockinfile:
     marker: "# {mark} ANSIBLE MANAGED BLOCK FOR mysqldump alias"
     block: "alias mysqldump='mysqldump --single-transaction --order-by-primary --set-gtid-purged=OFF'"
     path: "/etc/bashrc" 

 - name: SET AIO For Database Backup Server
   sysctl:
     name: "{{ item.name }}"
     value: "{{ item.value }}"
     state: present
     reload: yes
   with_items:
     - {name: fs.aio-max-nr, value: 262144}
   when: mode == "backup"

 - name: Copy my.cnf
   template:
     src: "my.cnf.j2"
     dest: "/etc/my.cnf"
     owner: "{{ mysql_os_user.name }}"
     group: "{{ mysql_os_user.name }}"
     mode: "600"
 
 - name: Set Regular Clean Mysql Logs
   template: 
     src: mysql.logrotate.j2
     dest: /etc/logrotate.d/mysql

 - name: Setup master instance
   block:
     - name: Copy mysqld.cnf
       template:
         src: "mysqld.cnf.j2"
         dest: "/etc/my.cnf.d/mysqld.cnf"
         owner: "{{ mysql_os_user.name }}"
         group: "{{ mysql_os_user.name }}"
         mode: "600"
     
     - name: Initail Mysql Instance Directory
       file:
         path: "{{ mysql_data_path }}/{{ mysql_port }}/{{ item }}"
         owner: "{{ mysql_os_user.name }}"
         group: "{{ mysql_os_user.name }}"
         recurse: yes
         state: directory
       with_items:
         - data
         - logs/binlog
         - logs/relaylog
         - logs/errorlog
         - logs/slowlog
    
     - name: Determine whether the instance has been initialized
       stat:
         path: "{{ mysql_data_path }}/{{ mysql_port }}/.initialized"
       register: file_check
    
     - name: Initialize instance
       block:
         - name: Set Initialize-insecure Args
           lineinfile:
             path: /etc/my.cnf.d/mysqld.cnf
             line: 'initialize_insecure=1'
        
         - name: Initialize Instance
           command: /usr/bin/mysqld_pre_systemd
           
         - name: Delete Initialize-insecure Args
           lineinfile:
             path: /etc/my.cnf.d/mysqld.cnf
             line: 'initialize_insecure=1'
             state: absent
       when: not file_check.stat.exists
    
     - name: Create initialized markup file
       file:
         path: "{{ mysql_data_path }}/{{ mysql_port }}/.initialized"
         owner: "{{ mysql_os_user.name }}"
         group: "{{ mysql_os_user.name }}"
         state: touch
    
     - name: Enable Mysql
       systemd:
         name: mysqld
         state: restarted
         enabled: yes
         daemon_reload: yes
    
     - name: Add mysql default user
       block:
         - name: Add Mysql Repl User
           mysql_user:
             name: "{{ mysql_repl_user.name }}"
             host: "{{ mysql_repl_user.host }}"
             password: "{{ mysql_repl_user.passwd }}"
             priv: "*.*:REPLICATION SLAVE,REPLICATION CLIENT"
             login_unix_socket: "{{ mysql_data_path }}/{{ mysql_port }}/mysql.sock"
             login_user: "root"
             state: present
    
         - name: Add Zabbix Monitor User
           mysql_user:
             name: "{{ zabbix_user.name }}"
             host: "{{ zabbix_user.host }}"
             password: "{{ zabbix_user.passwd }}"
             priv: "*.*:REPLICATION CLIENT,PROCESS,SHOW DATABASES,SHOW VIEW"
             login_unix_socket: "{{ mysql_data_path }}/{{ mysql_port }}/mysql.sock"
             login_user: "root"
             state: present
    
         - name: Add Jumpserver User
           mysql_user:
             name: "{{ jumpserver_user.name }}"
             host: "{{ jumpserver_user.host }}"
             password: "{{ jumpserver_user.passwd }}"
             login_unix_socket: "{{ mysql_data_path }}/{{ mysql_port }}/mysql.sock"
             login_user: "root"
             state: present
       when: mode == "master"      
   when: mode != "backup"

---
- name: Include mysql role vars
  include_role:
    name: mysql
    public: true
    tasks_from: "empty"

- name: Initail Mysql Instance Directory
  file:
    path: "{{ _replica_instance_dir }}/{{ item }}"
    owner: "{{ mysql_os_user }}"
    group: "{{ mysql_os_user }}"
    recurse: yes
    state: directory
  with_items:
    - data
    - logs/binlog
    - logs/relaylog
    - logs/errorlog
    - logs/slowlog

- name: Determine whether the instance has been initialized
  stat:
    path: "{{ _replica_instance_dir }}/.initialized"
  register: file_check

- name: Initialize instance
  command: "/usr/sbin/mysqld --initialize-insecure --user={{ mysql_os_user }} --datadir={{ _replica_instance_dir }}/data"
  when: not file_check.stat.exists
  notify: restart mysql service [ replica ]

- name: Create initialized markup file
  file:
    path: "{{ _replica_instance_dir }}/.initialized"
    state: touch
  when: not file_check.stat.exists

- name: Copy MySQL instance configuration file
  template:
    src: "mysqld.cnf.j2"
    dest: "{{ mysql_config_include_dir }}/mysqld@{{ _replica_port }}.cnf"
    owner: "{{ mysql_os_user }}"
    group: "{{ mysql_os_user }}"
    mode: "600"
  notify: restart mysql service [ replica ]

- name: Force all notified handlers to run at this point, not waiting for normal sync points
  ansible.builtin.meta: flush_handlers

- name: Include mysql replica role
  include_role: 
    name: mysql-replica
  vars:
    replica_unix_socket: "{{ _replica_instance_dir }}/mysql.sock"

- name: Create mysql slave info file
  file:
    path: "~/mysqlslave.txt"
    state: touch

- name: Record mysql slave info
  blockinfile:
    marker: "# {mark} ANSIBLE MANAGED BLOCK FOR Mysql Slave On Port {{ _replica_port }}"
    block: "{{ primary_host }}      {{ _replica_port }}"
    path: "~/mysqlslave.txt" 
